Introduction

The gSOAP tools provide an automated SOAP and XML data binding for C and C++ based
on compiler technologies. The tools simplify the development of SOAP/XML Web services and
XML application in C and C++ using autocode generation and advanced mapping methods. Most
toolkits for Web services adopt a WSDL/SOAP-centric view and oer APIs that require the use of
class libraries for XML-specic data structures. This forces a user to adapt the application logic
to these libraries because users have to write code to populate XML and extract data from XML
using a vendor-specic API. This often leads to fragile solutions with little or no assurances for
data consistency, type safety, and XML validation. By contrast, gSOAP provides a type-safe and
transparent solution through the use of compiler technology that hides irrelevant WSDL-, SOAP-,
REST-, and XML-specic protocol details from the user, while automatically ensuring XML validity
checking, memory management, and type-safe serialization. The gSOAP tools automatically map
native and user-dened C and C++ data types to semantically equivalent XML data types and
vice-versa. As a result, full SOAP/REST XML interoperability is achieved with a simple API
relieving the user from the burden of WSDL/SOAP/XML details, thus enabling him or her to
concentrate on the application-essential logic.
The gSOAP tools support the integration of (legacy) C/C++ codes (and other programming lan-
guages when a C interface is available), embedded systems, and real-time software in SOAP/XML
applications that share computational resources and information with other SOAP applications,
possibly across dierent platforms, language environments, and disparate organizations located
behind rewalls.
The gSOAP tools are also popular to implement XML data binding in C and C++. This means
that application-native data structures can be encoded in XML automatically, without the need to
write conversion code. The tools also produce XML schemas for the XML data binding, so external
applications can consume the XML data based on the schemas.

1.1 Getting Started
To start building Web services applications or automate XML data bindings with gSOAP, you
need:
 The gSOAP package from https://www.genivia.com/Products/downloads.html and se-
lect the gSOAP toolkit commercial edition, or download the GPL open source version from
SourceForge https://sourceforge.net/projects/gsoap2.
 A C or C++ compiler.
 You may want to install OpenSSL and the Zlib libraries to enable SSL (HTTPS) and com-
pression. These libraries are available for most platforms and are often already installed.
The gSOAP software is self-contained, so there is no need to download any third-party software,
except when you want to use OpenSSL for HTTPS and/or Zlib compression.
The gSOAP distribution package includes:
 The wsdl2h WSDL/schema converter and data binding tool.
 The soapcpp2 stub/skeleton compiler and code generator.
Binaries of these two tools are included in the gSOAP package in gsoap/bin for Windows and Mac
OS plarforms, see also the README les in the package for more details.
Although gSOAP tools are available in binary format for several platforms, the code generated by
these tools are all equivalent. This means that the generated source codes can be transferred to
other platforms and locally compiled.
If you don't have the binaries or if you want to rebuild them, you need
 Bison (or Yacc) to build soapcpp2.
 Flex (or Lex) to build soapcpp2.
 A C++ compiler to build wsdl2h.
Bison and Flex are preferred. Both are released under open source licenses that are compatible
with gSOAP's licenses.
 Bison is available from http://www.gnu.org/software/bison
 Flex is available from http://flex.sourceforge.net
You can also build soapcpp2 without Bison and Flex installed, see installation instructions on the
gSOAP web site.
The gSOAP engine is built as a library libgsoap.a and libgsoap++.a with separate versions of these
two libgsoapssl.a and libgsoapssl++.a that support SSL. See the README.txt instructions on how
to build these libraries with the platform-independent gSOAP package's autoconf and automake.
Alternatively, you can compile and link the engine's source code stdsoap2.c (or stdsoap2.cpp for C++)
directly with your code.
The gSOAP packages contain numerous examples in the samples directory. Run make to build the
example applications. The examples are also meant to demonstrate dierent features of gSOAP. A
streaming MTOM attachment server and client application demonstrate ecient le exchanges in
samples/mtom-stream. An SSL-secureWeb server application demonstrates the generation of dynamic
content for Web browsing and Web services functionality at the same time, see samples/webservice.
And much more.












