SET_TID_ADDRESS(2)                          Linux Programmer's Manual                         SET_TID_ADDRESS(2)



NAME
       set_tid_address - set pointer to thread ID

SYNOPSIS
       #include <linux/unistd.h>

       long set_tid_address(int *tidptr);

DESCRIPTION
       For   each   process,   the   kernel  maintains  two  attributes  (addresses)  called  set_child_tid  and
       clear_child_tid.  These two attributes contain the value NULL by default.

		------------------------------------------------------------
		对每个进程来说，内核维护修改两个属性： set_child_tid 和 clear_child_tid 
		。这俩默认为NULL

		set_child_tid	如果进程用clone CLONE_CHILD_SETTID 创建，set_child_tid 值将被设置为 ctid 
						系统调用的参数 passed ， 当 set_child_tid 被设置后， 
						该进程发生的第一件事时，将PID写入这个地址。

		clear_child_tid	如果进程用clone CLONE_CHILD_CLEARTID 创建，clear_child_tid 将被设置

		当一个进程设置了 clear_child_tid ，如果这个进程与另一个进程或者线程共享内存， 当 
		0 被写入特定的地址 clear_child_tid 并且内核执行下面的操作 futex(clear_child_tid, FUTEX_WAKE, 1, NULL, NULL, 0);

		这个操作的作用是如唤醒一个futex wait的进程，
		------------------------------------------------------------
		
       set_child_tid
              If a process is started using clone(2) with the CLONE_CHILD_SETTID flag, set_child_tid is  set  to
              the value passed in the ctid argument of that system call.

              When  set_child_tid  is  set, the very first thing the new process does is writing its PID at this
              address.

       clear_child_tid
              If a process is started using clone(2) with the CLONE_CHILD_CLEARTID flag, clear_child_tid is  set
              to the value passed in the ctid argument of that system call.

       The system call set_tid_address() sets the clear_child_tid value for the calling process to tidptr.

       When  a process whose clear_child_tid is not NULL terminates, then, if the process is sharing memory with
       other processes or threads, then 0 is written at the address specified in clear_child_tid and the  kernel
       performs the following operation:

           futex(clear_child_tid, FUTEX_WAKE, 1, NULL, NULL, 0);

       The  effect  of  this operation is to wake a single process that is performing a futex wait on the memory
       location.  Errors from the futex wake operation are ignored.

RETURN VALUE
       set_tid_address() always returns the PID of the calling process.

ERRORS
       set_tid_address() always succeeds.

VERSIONS
       This call is present since Linux 2.5.48.  Details as given here are valid since Linux 2.5.49.

CONFORMING TO
       This system call is Linux-specific.

SEE ALSO
       clone(2), futex(2)

COLOPHON
       This page is part of release 3.53 of the Linux man-pages project.  A  description  of  the  project,  and
       information about reporting bugs, can be found at http://www.kernel.org/doc/man-pages/.



Linux                                              2012-07-19                                 SET_TID_ADDRESS(2)
