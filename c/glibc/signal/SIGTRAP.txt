https://blog.csdn.net/emilsun777/article/details/50778042/
---------------------------------------------------------------------------------------------
在大多数系统，gdb对使用fork创建的进程没有进行特别的支持。当父进程使用fork创建子进程
，gdb仍然只会调试父进程，而子进程没有得到控制和调试。这个时候，如果你在子进程执行到
的代码中设置了断点，那么当子进程执行到这个断点的时候，会产生一个SIGTRAP的信号，
如果没有对此信号进行捕捉处理，就会按默认的处理方式处理——终止进程。

当然，你可以使用时间延迟的方法，在子进程fork出来之后，使用Sleep函数等待一段时间再运行，
在这段时间中你使用ps找到该进程，然后使用Attach方法把该进程附加到gdb中，从而达到可以
调试子进程的目的。

    在一部分系统中(我使用的是基于2.6内核的CentOS，支持follow-fork和detach-on-fork模式)
，比如HP-UX11.x之后的版本，Linux2.5.
60之后的版本，可以使用以下的方法来达到方便的进行多进程调试功能。

    默认情况下，父进程fork一个子进程，gdb只会继续调试父进程而不会管子进程的运行。
    如果你想跟踪子进程进行调试，可以使用set follow-fork-mode mode来设置fork跟随模式。
    set follow-fork-mode 所带的mode参数可以是以下的一种：
    parent
        gdb只跟踪父进程，不跟踪子进程，这是默认的模式。
    child
        gdb在子进程产生以后只跟踪子进程，放弃对父进程的跟踪。
    进入gdb以后，我们可以使用show follow-fork-mode来查看目前的跟踪模式。

    可以看到目前使用的模式是parent。

    
然而，有的时候，我们想同时调试父进程和子进程，以上的方法就不能满足了。Linux提供了
set detach-on-fork mode命令来供我们使用。其使用的mode可以是以下的一种：

    on
        只调试父进程或子进程的其中一个(根据follow-fork-mode来决定)，这是默认的模式。
    off
        父子进程都在gdb的控制之下，其中一个进程正常调试(根据follow-fork-mode来决定)
    另一个进程会被设置为暂停状态。
    同样，show detach-on-fork显示了目前是的detach-on-fork模式，如上图。

    
以上是调试fork产生子进程的情况，但是如果子进程使用exec系统函数而装载了新程序执行呢？
——我们使用set follow-exec-mode 
mode提供的模式来跟踪这个exec装载的程序。mode可以是以下的一种：

    new 
当发生exec的时候，如果这个选项是new，则新建一个inferior给执行起来的子进程，而父进程
的inferior仍然保留，当前保留的inferior的程序状态是没有执行。

    same 当发生exec的时候，如果这个选项是same(默认值)
，因为父进程已经退出，所以自动在执行exec的inferior上控制子进程。