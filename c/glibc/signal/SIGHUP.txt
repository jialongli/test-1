SIGHUP信号

https://blog.csdn.net/z_ryan/article/details/80952498
--------------------------------------------------------

　　在介绍SIGHUP信号之前，先来了解两个概念：进程组和会话。

	会话 > 进程组 > 进程

进程组
--------------------------------------------------------

　　进程组就是一系列相互关联的进程集合，系统中的每一个进程也必须从属于某一个进程组；
每个进程组中都会有一个唯一的 ID(process group id)，简称 PGID；  （ pid_t getpgid(pid_t pid); ）
PGID一般等同于进程组的创建进程的 Process ID，而这个进进程一般也会被称为进程组先导(
process group leader)，同一进程组中除了进程组先导外的其他进程都是其子进程；

　　进程组的存在，方便了系统对多个相关进程执行某些统一的操作，例如，我们可以一
次性发送一个信号量给同一进程组中的所有进程。


会话
--------------------------------------------------------
　　会话（session）是一个若干进程组的集合，同样的，系统中每一个进程组也都必须从属
于某一个会话；一个会话只拥有最多一个控制终端（也可以没有），该终端为会话中所有进
程组中的进程所共用。一个会话中前台进程组只会有一个，只有其中的进程才可以和控制
终端进行交互；除了前台进程组外的进程组，都是后台进程组；和进程组先导类似，会话中
也有会话先导(session leader)
的概念，用来表示建立起到控制终端连接的进程。在拥有控制终端的会话中，session leader 
也被称为控制进程(controlling process)，一般来说控制进程也就是登入系统的 shell 进程
(login shell)；

[root@localhost signal]# sleep 50 &
[1] 60077
[root@localhost signal]# ps -ef | grep sleep
root      60077  18853  0 13:14 pts/1    00:00:00 sleep 50
root      60093  18853  0 13:14 pts/1    00:00:00 grep --color=auto sleep
[root@localhost signal]# ps -j 60077
   PID   PGID    SID TTY      STAT   TIME COMMAND
 60077  60077  17305 pts/1    S      0:00 sleep 50


执行睡眠后台进程sleep 50 & 之后，通过　ps 命令查看该进程及shell信息如上图：

	1. PPID 指父进程 id；PID 指进程 id；PGID 指进程组 id
	2. SID 指会话 id；TTY 指会话的控制终端设备；COMMAND 指进程所执行的命令
	3. TPGID 指前台进程组的 PGID。


----------------------------------------------------------------------------------------------------------------

SIGHUP 信号的触发及默认处理
--------------------------------------------------------
　　在对会话的概念有所了解之后，我们现在开始正式介绍一下SIGHUP信号，SIGHUP 
信号在用户终端连接(正常或非正常)结束时发出, 通常是在终端的控制进程结束时, 
通知同一session内的各个作业, 这时它们与控制终端不再关联. 
系统对SIGHUP信号的默认处理是终止收到该信号的进程。所以若程序中没有捕捉该信号，
当收到该信号时，进程就会退出。

　　
SIGHUP 会在以下3种情况下被发送给相应的进程：
--------------------------------------------------------
　　1、终端关闭时，该信号被发送到session首进程以及作为job提交的进程（即用 & 符号提交的进程）；
　　2、session首进程退出时，该信号被发送到该session中的前台进程组中的每一个进程；
	3、若父进程退出导致进程组成为孤儿进程组，且该进程组中有进程处于停止状态
		（收到SIGSTOP或SIGTSTP信号），该信号会被发送到该进程组中的每一个进程。

　　
　　例如：在我们登录Linux时，系统会分配给登录用户一个终端(Session)
。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个 
Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。
这个信号的默认操作为终止进程，因此前台进 程组和后台有终端输出的进程就会中止。


此外，对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。 
比如xinetd超级服务程序。

　　当xinetd程序在接收到SIGHUP信号之后调用hard_reconfig函数，它将循环读取/etc/xinetd.d/
目录下的每个子配置文件，并检测其变化。如果某个正在运行的子服务的配置文件被修改以停止服务，
则xinetd主进程讲给该子服务进程发送SIGTERM信号来结束它。如果某个子服务的配
置文件被修改以开启服务，则xinetd将创建新的socket并将其绑定到该服务对应的端口上。
