READLINK(3P)                                      POSIX Programmer's Manual                                     READLINK(3P)



PROLOG
       This  manual  page  is  part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ
       (consult the corresponding Linux manual page for details of Linux behavior), or the interface may not be  implemented
       on Linux.

NAME
       readlink - read the contents of a symbolic link

SYNOPSIS
       #include <unistd.h>

       ssize_t readlink(const char *restrict path, char *restrict buf,
              size_t bufsize);


DESCRIPTION
       The readlink() function shall place the contents of the symbolic link referred to by path in the buffer buf which has
       size bufsize. If the number of bytes in the symbolic link is less than bufsize, the contents of the remainder of  buf
       are  unspecified.  If the buf argument is not large enough to contain the link content, the first bufsize bytes shall
       be placed in buf.

       If the value of bufsize is greater than {SSIZE_MAX}, the result is implementation-defined.

RETURN VALUE
       Upon successful completion, readlink() shall return the count of bytes placed in  the  buffer.  Otherwise,  it  shall
       return a value of -1, leave the buffer unchanged, and set errno to indicate the error.

ERRORS
       The readlink() function shall fail if:

       EACCES Search permission is denied for a component of the path prefix of path.

       EINVAL The path argument names a file that is not a symbolic link.

       EIO    An I/O error occurred while reading from the file system.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of the path argument exceeds {PATH_MAX} or a pathname component is longer than {NAME_MAX}.

       ENOENT A component of path does not name an existing file or path is an empty string.

       ENOTDIR
              A component of the path prefix is not a directory.


       The readlink() function may fail if:

       EACCES Read permission is denied for the directory.

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path argument.

       ENAMETOOLONG
              As  a result of encountering a symbolic link in resolution of the path argument, the length of the substituted
              pathname string exceeded {PATH_MAX}.


       The following sections are informative.

EXAMPLES
   Reading the Name of a Symbolic Link
       The following example shows how to read the name of a symbolic link named /modules/pass1.


              #include <unistd.h>


              char buf[1024];
              ssize_t len;
              ...
              if ((len = readlink("/modules/pass1", buf, sizeof(buf)-1)) != -1)
                  buf[len] = '\0';

APPLICATION USAGE
       Conforming applications should not assume that the returned contents of the symbolic link are null-terminated.

RATIONALE
       Since IEEE Std 1003.1-2001 does not require any association of file times with symbolic links, there is  no  require‐
       ment  that file times be updated by readlink(). The type associated with bufsiz is a size_t in order to be consistent
       with both the ISO C standard and the definition of read().  The behavior specified for readlink() when bufsiz is zero
       represents  historical  practice. For this case, the standard developers considered a change whereby readlink() would
       return the number of non-null bytes contained in the symbolic link with the buffer buf remaining unchanged;  however,
       since  the  stat  structure member st_size value can be used to determine the size of buffer necessary to contain the
       contents of the symbolic link as returned by readlink(), this proposal was  rejected,  and  the  historical  practice
       retained.

FUTURE DIRECTIONS
       None.

SEE ALSO
       lstat(), stat(), symlink(), the Base Definitions volume of IEEE Std 1003.1-2001, <unistd.h>

COPYRIGHT
       Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2003 Edition, Standard
       for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base  Specifications  Issue
       6,  Copyright  (C) 2001-2003 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the
       event of any discrepancy between this version and the original IEEE and The Open Group Standard,  the  original  IEEE
       and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .



IEEE/The Open Group                                         2003                                                READLINK(3P)
