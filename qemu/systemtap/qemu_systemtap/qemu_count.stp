/* This file is autogenerated by tracetool, do not edit. */

probe qemu.system.x86_64.breakpoint_insert = process("/usr/bin/qemu-system-x86_64").mark("breakpoint_insert")
{
  cpu_index = $arg1;
  pc = $arg2;
  flags = $arg3;
}
probe qemu.system.x86_64.breakpoint_remove = process("/usr/bin/qemu-system-x86_64").mark("breakpoint_remove")
{
  cpu_index = $arg1;
  pc = $arg2;
  flags = $arg3;
}
probe qemu.system.x86_64.breakpoint_singlestep = process("/usr/bin/qemu-system-x86_64").mark("breakpoint_singlestep")
{
  cpu_index = $arg1;
  enabled = $arg2;
}
probe qemu.system.x86_64.dma_blk_io = process("/usr/bin/qemu-system-x86_64").mark("dma_blk_io")
{
  dbs = $arg1;
  bs = $arg2;
  offset = $arg3;
  to_dev = $arg4;
}
probe qemu.system.x86_64.dma_aio_cancel = process("/usr/bin/qemu-system-x86_64").mark("dma_aio_cancel")
{
  dbs = $arg1;
}
probe qemu.system.x86_64.dma_complete = process("/usr/bin/qemu-system-x86_64").mark("dma_complete")
{
  dbs = $arg1;
  ret = $arg2;
  cb = $arg3;
}
probe qemu.system.x86_64.dma_blk_cb = process("/usr/bin/qemu-system-x86_64").mark("dma_blk_cb")
{
  dbs = $arg1;
  ret = $arg2;
}
probe qemu.system.x86_64.dma_map_wait = process("/usr/bin/qemu-system-x86_64").mark("dma_map_wait")
{
  dbs = $arg1;
}
probe qemu.system.x86_64.find_ram_offset = process("/usr/bin/qemu-system-x86_64").mark("find_ram_offset")
{
  size = $arg1;
  offset = $arg2;
}
probe qemu.system.x86_64.find_ram_offset_loop = process("/usr/bin/qemu-system-x86_64").mark("find_ram_offset_loop")
{
  size = $arg1;
  candidate = $arg2;
  offset = $arg3;
  next_ = $arg4;
  mingap = $arg5;
}
probe qemu.system.x86_64.ram_block_discard_range = process("/usr/bin/qemu-system-x86_64").mark("ram_block_discard_range")
{
  rbname = $arg1;
  hva = $arg2;
  length = $arg3;
  need_madvise = $arg4;
  need_fallocate = $arg5;
  ret = $arg6;
}
probe qemu.system.x86_64.memory_notdirty_write_access = process("/usr/bin/qemu-system-x86_64").mark("memory_notdirty_write_access")
{
  vaddr = $arg1;
  ram_addr = $arg2;
  size = $arg3;
}
probe qemu.system.x86_64.memory_notdirty_set_dirty = process("/usr/bin/qemu-system-x86_64").mark("memory_notdirty_set_dirty")
{
  vaddr = $arg1;
}
probe qemu.system.x86_64.gdbstub_op_start = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_op_start")
{
  device = $arg1;
}
probe qemu.system.x86_64.gdbstub_op_exiting = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_op_exiting")
{
  code = $arg1;
}
probe qemu.system.x86_64.gdbstub_op_continue = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_op_continue")
{
}
probe qemu.system.x86_64.gdbstub_op_continue_cpu = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_op_continue_cpu")
{
  cpu_index = $arg1;
}
probe qemu.system.x86_64.gdbstub_op_stepping = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_op_stepping")
{
  cpu_index = $arg1;
}
probe qemu.system.x86_64.gdbstub_op_extra_info = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_op_extra_info")
{
  info = $arg1;
}
probe qemu.system.x86_64.gdbstub_hit_watchpoint = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_hit_watchpoint")
{
  type = $arg1;
  cpu_gdb_index = $arg2;
  vaddr = $arg3;
}
probe qemu.system.x86_64.gdbstub_hit_internal_error = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_hit_internal_error")
{
}
probe qemu.system.x86_64.gdbstub_hit_break = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_hit_break")
{
}
probe qemu.system.x86_64.gdbstub_hit_paused = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_hit_paused")
{
}
probe qemu.system.x86_64.gdbstub_hit_shutdown = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_hit_shutdown")
{
}
probe qemu.system.x86_64.gdbstub_hit_io_error = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_hit_io_error")
{
}
probe qemu.system.x86_64.gdbstub_hit_watchdog = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_hit_watchdog")
{
}
probe qemu.system.x86_64.gdbstub_hit_unknown = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_hit_unknown")
{
  state = $arg1;
}
probe qemu.system.x86_64.gdbstub_io_reply = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_io_reply")
{
  message = $arg1;
}
probe qemu.system.x86_64.gdbstub_io_binaryreply = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_io_binaryreply")
{
  ofs = $arg1;
  line = $arg2;
}
probe qemu.system.x86_64.gdbstub_io_command = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_io_command")
{
  command = $arg1;
}
probe qemu.system.x86_64.gdbstub_io_got_ack = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_io_got_ack")
{
}
probe qemu.system.x86_64.gdbstub_io_got_unexpected = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_io_got_unexpected")
{
  ch = $arg1;
}
probe qemu.system.x86_64.gdbstub_err_got_nack = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_err_got_nack")
{
}
probe qemu.system.x86_64.gdbstub_err_garbage = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_err_garbage")
{
  ch = $arg1;
}
probe qemu.system.x86_64.gdbstub_err_overrun = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_err_overrun")
{
}
probe qemu.system.x86_64.gdbstub_err_invalid_repeat = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_err_invalid_repeat")
{
  ch = $arg1;
}
probe qemu.system.x86_64.gdbstub_err_invalid_rle = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_err_invalid_rle")
{
}
probe qemu.system.x86_64.gdbstub_err_checksum_invalid = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_err_checksum_invalid")
{
  ch = $arg1;
}
probe qemu.system.x86_64.gdbstub_err_checksum_incorrect = process("/usr/bin/qemu-system-x86_64").mark("gdbstub_err_checksum_incorrect")
{
  expected = $arg1;
  got = $arg2;
}
probe qemu.system.x86_64.job_state_transition = process("/usr/bin/qemu-system-x86_64").mark("job_state_transition")
{
  job = $arg1;
  ret = $arg2;
  legal = $arg3;
  s0 = $arg4;
  s1 = $arg5;
}
probe qemu.system.x86_64.job_apply_verb = process("/usr/bin/qemu-system-x86_64").mark("job_apply_verb")
{
  job = $arg1;
  state = $arg2;
  verb = $arg3;
  legal = $arg4;
}
probe qemu.system.x86_64.job_completed = process("/usr/bin/qemu-system-x86_64").mark("job_completed")
{
  job = $arg1;
  ret = $arg2;
}
probe qemu.system.x86_64.qmp_job_cancel = process("/usr/bin/qemu-system-x86_64").mark("qmp_job_cancel")
{
  job = $arg1;
}
probe qemu.system.x86_64.qmp_job_pause = process("/usr/bin/qemu-system-x86_64").mark("qmp_job_pause")
{
  job = $arg1;
}
probe qemu.system.x86_64.qmp_job_resume = process("/usr/bin/qemu-system-x86_64").mark("qmp_job_resume")
{
  job = $arg1;
}
probe qemu.system.x86_64.qmp_job_complete = process("/usr/bin/qemu-system-x86_64").mark("qmp_job_complete")
{
  job = $arg1;
}
probe qemu.system.x86_64.qmp_job_finalize = process("/usr/bin/qemu-system-x86_64").mark("qmp_job_finalize")
{
  job = $arg1;
}
probe qemu.system.x86_64.qmp_job_dismiss = process("/usr/bin/qemu-system-x86_64").mark("qmp_job_dismiss")
{
  job = $arg1;
}
probe qemu.system.x86_64.guest_cpu_enter = process("/usr/bin/qemu-system-x86_64").mark("guest_cpu_enter")
{
  __cpu = $arg1;
}
probe qemu.system.x86_64.guest_cpu_exit = process("/usr/bin/qemu-system-x86_64").mark("guest_cpu_exit")
{
  __cpu = $arg1;
}
probe qemu.system.x86_64.guest_cpu_reset = process("/usr/bin/qemu-system-x86_64").mark("guest_cpu_reset")
{
  __cpu = $arg1;
}
probe qemu.system.x86_64.guest_mem_before_trans = process("/usr/bin/qemu-system-x86_64").mark("guest_mem_before_trans")
{
  __cpu = $arg1;
  info = $arg2;
}
probe qemu.system.x86_64.guest_mem_before_exec = process("/usr/bin/qemu-system-x86_64").mark("guest_mem_before_exec")
{
  __cpu = $arg1;
  vaddr = $arg2;
  info = $arg3;
}
probe qemu.system.x86_64.guest_user_syscall = process("/usr/bin/qemu-system-x86_64").mark("guest_user_syscall")
{
  __cpu = $arg1;
  num = $arg2;
  arg1 = $arg3;
  arg2 = $arg4;
  arg3 = $arg5;
  arg4 = $arg6;
  arg5 = $arg7;
  arg6 = $arg8;
  arg7 = $arg9;
  arg8 = $arg10;
}
probe qemu.system.x86_64.guest_user_syscall_ret = process("/usr/bin/qemu-system-x86_64").mark("guest_user_syscall_ret")
{
  __cpu = $arg1;
  num = $arg2;
  ret = $arg3;
}

