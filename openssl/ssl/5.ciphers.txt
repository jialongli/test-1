# Copyright (C) Rong Tao @Sylincom Beijing, 2020年 01月 19日 星期日 17:07:20 CST. 
31.5 加密套件
一个加密套件指明了 SSL 握手阶段和通信阶段所应该采用的各种算法。这些算法包括：
认证算法、密钥交换算法、对称算法和摘要算法等。
在握手初始化的时候，双方都会导入各自所认可的多种加密套件。在握手阶段，由服务
端选择其中的一种加密套件。
OpenSSL 的ciphers 命令可以列出所有的加密套件。openssl 的加密套件在s3_lib.c 的
ssl3_ciphers 数组中定义。比如有：
		
	/* Cipher 05 */
	{
		1,
		SSL3_TXT_RSA_RC4_128_SHA,
		SSL3_CK_RSA_RC4_128_SHA,
		SSL_kRSA|SSL_aRSA|SSL_RC4 |SSL_SHA1|SSL_SSLV3,
		SSL_NOT_EXP|SSL_MEDIUM,
		0,
		128,
		128,
		SSL_ALL_CIPHERS,
		SSL_ALL_STRENGTHS,
	}
	
其中1 表示是合法的加密套件；SSL3_TXT_RSA_RC4_128_SHA 为加密套件的名字，
SSL3_CK_RSA_RC4_128_SHA 为加密套件ID ， SSL_kRSA|SSL_aRSA|SSL_RC4
|SSL_SHA1|SSL_SSLV3 表明了各种算法，其中密钥交换采用RSA 算法（SSL_kRSA），认
证采用RSA 算法（SSL_aRSA），对称加密算法采用RC4 算法(SSL_RC4)，摘要采用SHA1，
采用SSL 协议第三版本，SSL_NOT_EXP|SSL_MEDIUM 表明算法的强度。
在客户端和服务器端建立安全连接之前，双方都必须指定适合自己的加密套件。加密套
件的选择可以通过组合的字符串来控制。
字符串的形式举例：ALL:!ADH:RC4+RSA:+SSLv2:@STRENGTH。
Openssl定义了4中选择符号：“＋”，“－”，“！”，“@
”。其中，“＋”表示取交集；“－”

表示临时删除一个算法；“！”表示永久删除一个算法；“@“表示了排序方法。
多个描述之间可以用“：”、“，”、“ 
”、“；”来分开。选择加密套件的时候按照从左到的

顺序构成双向链表，存放与内存中。
ALL:!ADH:RC4+RSA:+SSLv2:@STRENGTH表示的意义是：首先选择所有的加密套件
（不包含eNULL，即空对称加密算法），然后在得到的双向链表之中去掉身份验证采用DH
的加密套件；加入包含RC4算法并将包含RSA的加密套件放在双向链表的尾部；再将支持
SSLV2的加密套件放在尾部；最后得到的结果按照安全强度进行排序。
SSL建立链接之前，客户端和服务器端用openssl函数来设置自己支持的加密套件。主要
的函数有：

int SSL_set_cipher_list(SSL *s,const char *str)；
int SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str)；

比如只设置一种加密套件：

int ret=SSL_set_cipher_list(ssl,"RC4-MD5");

如果服务端只设置了一种加密套件，那么客户端要么接受要么返回错误。加密套件的选
择是由服务端做出的。


我的结果：
[root@localhost ssl]# openssl ciphers all
	
	Error in cipher list
	139743095924624:error:1410D0B9:SSL routines:SSL_CTX_set_cipher_list:no cipher match:ssl_lib.c:1383:
	[root@localhost ssl]# openssl ciphers 
	ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-R
	SA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DH-DSS-AES256-GCM-SHA384:DHE-DSS-AES256-GCM-SHA384:DH-RSA-AES256-GCM-SHA384:DHE-
	RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA256:DH-RSA-AES256-SHA256:DH-DSS-AES256-SHA256:DHE-RSA-
	AES256-SHA:DHE-DSS-AES256-SHA:DH-RSA-AES256-SHA:DH-DSS-AES256-SHA:DHE-RSA-CAMELLIA256-SHA:DHE-DSS-CAMELLIA256-SHA:DH-
	RSA-CAMELLIA256-SHA:DH-DSS-CAMELLIA256-SHA:ECDH-RSA-AES256-GCM-SHA384:ECDH-ECDSA-AES256-GCM-SHA384:ECDH-RSA-AES256-
	SHA384:ECDH-ECDSA-AES256-SHA384:ECDH-RSA-AES256-SHA:ECDH-ECDSA-AES256-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:
	CAMELLIA256-SHA:PSK-AES256-CBC-SHA:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:
	ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:DH-DSS-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-
	SHA256:DH-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-DSS-AES128-SHA256:DH-RSA-AES128-
	SHA256:DH-DSS-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA:DH-RSA-AES128-SHA:DH-DSS-AES128-SHA:DHE-RSA-SEED-SHA
	:DHE-DSS-SEED-SHA:DH-RSA-SEED-SHA:DH-DSS-SEED-SHA:DHE-RSA-CAMELLIA128-SHA:DHE-DSS-CAMELLIA128-SHA:DH-RSA-CAMELLIA128-
	SHA:DH-DSS-CAMELLIA128-SHA:ECDH-RSA-AES128-GCM-SHA256:ECDH-ECDSA-AES128-GCM-SHA256:ECDH-RSA-AES128-SHA256:ECDH-ECDSA-
	AES128-SHA256:ECDH-RSA-AES128-SHA:ECDH-ECDSA-AES128-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:SEED-SHA:
	CAMELLIA128-SHA:PSK-AES128-CBC-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:EDH-DSS-DES-
	CBC3-SHA:DH-RSA-DES-CBC3-SHA:DH-DSS-DES-CBC3-SHA:ECDH-RSA-DES-CBC3-SHA:ECDH-ECDSA-DES-CBC3-SHA:DES-CBC3-SHA:IDEA-CBC-
	SHA:PSK-3DES-EDE-CBC-SHA:KRB5-IDEA-CBC-SHA:KRB5-DES-CBC3-SHA:KRB5-IDEA-CBC-MD5:KRB5-DES-CBC3-MD5:ECDHE-RSA-RC4-SHA:
	ECDHE-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:RC4-SHA:RC4-MD5:PSK-RC4-SHA:KRB5-RC4-SHA:KRB5-RC4-MD5


