# Copyright (C) Rong Tao @Sylincom Beijing, 2019年 06月 14日 星期五 09:06:42 CST. 
11.8 退出脚本
迄今为止所有的示例脚本中，我们都是突然停下来的。运行完最后一条命令时，脚本就结束
了。其实还有另外一种更优雅的方法可以为脚本划上一个句号。
shell中运行的每个命令都使用退出状态码（exit status）告诉shell它已经运行完毕。退出状态
码是一个0～255的整数值，在命令结束运行时由命令传给shell。可以捕获这个值并在脚本中使用。


11.8.1 查看退出状态码
Linux提供了一个专门的变量$?来保存上个已执行命令的退出状态码。对于需要进行检查的
命令，必须在其运行完毕后立刻查看或使用$?变量。它的值会变成由shell所执行的最后一条命令
的退出状态码。
$ date
Sat Jan 15 10:01:30 EDT 2014
$ echo $?
0
$
按照惯例，一个成功结束的命令的退出状态码是0。如果一个命令结束时有错误，退出状态
码就是一个正数值。
$ asdfg
-bash: asdfg: command not found
$ echo $?
127
$
无效命令会返回一个退出状态码127。 Linux错误退出状态码没有什么标准可循，但有一些可
用的参考，如表11-2所示。



表11-2 Linux退出状态码
状 态 码 描 述
0 命令成功结束
1 一般性未知错误
2 不适合的shell命令
126 命令不可执行
127 没找到命令
128 无效的退出参数
128+x 与Linux信号x相关的严重错误
130 通过Ctrl+C终止的命令
255 正常范围之外的退出状态码
退出状态码126表明用户没有执行命令的正确权限。
$ ./myprog.c
-bash: ./myprog.c: Permission denied
$ echo $?
126
$
另一个会碰到的常见错误是给某个命令提供了无效参数。
$ date %t
date: invalid date '%t'
$ echo $?
1
$
这会产生一般性的退出状态码1，表明在命令中发生了未知错误。
