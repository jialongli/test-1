# Copyright (C) Rong Tao @Sylincom Beijing, 2019年 06月 14日 星期五 09:06:42 CST. 
16.6.1 用 at 命令来计划执行作业
at命令允许指定Linux系统何时运行脚本。 at命令会将作业提交到队列中，指定shell何时运
行该作业。 at的守护进程atd会以后台模式运行，检查作业队列来运行作业。大多数Linux发行
版会在启动时运行此守护进程。
atd守护进程会检查系统上的一个特殊目录（通常位于/var/spool/at）来获取用at命令提交的
作业。默认情况下， atd守护进程会每60秒检查一下这个目录。有作业时， atd守护进程会检查
作业设置运行的时间。如果时间跟当前时间匹配， atd守护进程就会运行此作业。
后面几节会介绍如何用at命令提交要运行的作业以及如何管理这些作业。
1. at命令的格式
at命令的基本格式非常简单：
at [-f filename] time
默认情况下，at命令会将STDIN的输入放到队列中。你可以用-f参数来指定用于读取命令（脚
本文件）的文件名。
time参数指定了Linux系统何时运行该作业。如果你指定的时间已经错过， at命令会在第二
天的那个时间运行指定的作业。
在如何指定时间这个问题上，你可以非常灵活。 at命令能识别多种不同的时间格式。
 标准的小时和分钟格式，比如10:15。
 AM/PM指示符，比如10:15 PM。
 特定可命名时间，比如now、 noon、 midnight或者teatime（4 PM）。
除了指定运行作业的时间，也可以通过不同的日期格式指定特定的日期。
 标准日期格式，比如MMDDYY、 MM/DD/YY或DD.MM.YY。
 文本日期，比如Jul 4或Dec 25，加不加年份均可。
 你也可以指定时间增量。
 当前时间+25 min
 明天10:15 PM
 10:15+7天
在你使用at命令时，该作业会被提交到作业队列（job queue）。作业队列会保存通过at命令
提交的待处理的作业。针对不同优先级，存在26种不同的作业队列。作业队列通常用小写字母a~z
和大写字母A~Z来指代。
说明 在几年前，也可以使用batch命令在指定时间执行某个脚本。 batch命令很特别，你可以
安 排脚 本 在 系 统处 于 低 负 载时 运 行 。 但现 在 batch 命令 只 不 过是 一 个 脚 本而已
（/usr/bin/batch），它会调用at命令并将作业提交到b队列中。
作业队列的字母排序越高，作业运行的优先级就越低（更高的nice值）。默认情况下， at的
作业会被提交到a作业队列。 如果想以更高优先级运行作业， 可以用-q参数指定不同的队列字母。
2. 获取作业的输出
当作业在Linux系统上运行时，显示器并不会关联到该作业。取而代之的是， Linux系统会将
提交该作业的用户的电子邮件地址作为STDOUT和STDERR。任何发到STDOUT或STDERR的输出都
会通过邮件系统发送给该用户。
这里有个在CentOS发行版中使用at命令安排作业执行的例子。
$ cat test13.sh
#!/bin/bash
# Test using at command
#
echo "This script ran at $(date +%B%d,%T)"
echo
sleep 5
echo "This is the script's end..."
#
$ at -f test13.sh now
job 7 at 2015-07-14 12:38
$
at命令会显示分配给作业的作业号以及为作业安排的运行时间。 -f选项指明使用哪个脚本
文件， now指示at命令立刻执行该脚本。
使用e-mail作为at命令的输出极其不便。 at命令利用sendmail应用程序来发送邮件。如
果你的系统中没有安装sendmail，那就无法获得任何输出！因此在使用at命令时，最好在脚本
中对STDOUT和STDERR进行重定向（参见第15章），如下例所示。
$ cat test13b.sh
#!/bin/bash
# Test using at command
#
echo "This script ran at $(date +%B%d,%T)" > test13b.out
echo >> test13b.out
sleep 5
echo "This is the script's end..." >> test13b.out
#
$
$ at -M -f test13b.sh now
job 8 at 2015-07-14 12:48
$
$ cat test13b.out
This script ran at July14,12:48:18
This is the script's end...
$
如果不想在at命令中使用邮件或重定向，最好加上-M选项来屏蔽作业产生的输出信息。
3. 列出等待的作业
atq命令可以查看系统中有哪些作业在等待。
$ at -M -f test13b.sh teatime
job 17 at 2015-07-14 16:00
$
$ at -M -f test13b.sh tomorrow
job 18 at 2015-07-15 13:03
$
$ at -M -f test13b.sh 13:30
job 19 at 2015-07-14 13:30
$
$ at -M -f test13b.sh now
job 20 at 2015-07-14 13:03
$
$ atq
20 2015-07-14 13:03 = Christine
18 2015-07-15 13:03 a Christine
17 2015-07-14 16:00 a Christine
19 2015-07-14 13:30 a Christine
$
作业列表中显示了作业号、系统运行该作业的日期和时间及其所在的作业队列。
4. 删除作业
一旦知道了哪些作业在作业队列中等待，就能用atrm命令来删除等待中的作业。
$ atq
18 2015-07-15 13:03 a Christine
17 2015-07-14 16:00 a Christine
19 2015-07-14 13:30 a Christine
$
$ atrm 18
$
$ atq
17 2015-07-14 16:00 a Christine
19 2015-07-14 13:30 a Christine
$
只要指定想要删除的作业号就行了。只能删除你提交的作业，不能删除其他人的。
16.6.2 安排需要定期执行的脚本
用at命令在预设时间安排脚本执行非常好用，但如果你需要脚本在每天的同一时间运行或是
每周一次、每月一次呢？用不着再使用at不断提交作业了，你可以利用Linux系统的另一个功能。
Linux系统使用cron程序来安排要定期执行的作业。 cron程序会在后台运行并检查一个特殊的
表（被称作cron时间表） ，以获知已安排执行的作业。
1. cron时间表
cron时间表采用一种特别的格式来指定作业何时运行。其格式如下：
min hour dayofmonth month dayofweek command
cron时间表允许你用特定值、取值范围（比如1~5）或者是通配符（星号）来指定条目。例
如，如果想在每天的10:15运行一个命令，可以用cron时间表条目：
15 10 * * * command
在dayofmonth、 month以及dayofweek字段中使用了通配符，表明cron会在每个月每天的10:15
执行该命令。要指定在每周一4:15 PM运行的命令，可以用下面的条目：
15 16 * * 1 command
可以用三字符的文本值（mon、 tue、 wed、 thu、 fri、 sat、 sun）或数值（0为周日， 6为周六）
来指定dayofweek表项。
这里还有另外一个例子：在每个月的第一天中午12点执行命令。可以用下面的格式：
00 12 1 * * command
dayofmonth表项指定月份中的日期值（1~31）。
说明 聪明的读者可能会问如何设置一个在每个月的最后一天执行的命令，因为你无法设置
dayofmonth的值来涵盖所有的月份。这个问题困扰着Linux和Unix程序员，也激发了不少解
决办法。常用的方法是加一条使用date命令的if-then语句来检查明天的日期是不是01：
00 12 * * * if [`date +%d -d tomorrow` = 01 ] ; then ; command
它会在每天中午12点来检查是不是当月的最后一天，如果是， cron将会运行该命令。
命令列表必须指定要运行的命令或脚本的全路径名。你可以像在普通的命令行中那样，添加
任何想要的命令行参数和重定向符号。
15 10 * * * /home/rich/test4.sh > test4out
cron程序会用提交作业的用户账户运行该脚本。因此，你必须有访问该命令和命令中指定的
输出文件的权限。
2. 构建cron时间表
每个系统用户（包括root用户）都可以用自己的cron时间表来运行安排好的任务。 Linux提供
了crontab命令来处理cron时间表。要列出已有的cron时间表，可以用-l选项。
$ crontab -l
no crontab for rich
$
默认情况下，用户的cron时间表文件并不存在。要为cron时间表添加条目，可以用-e选项。
在添加条目时， crontab命令会启用一个文本编辑器（参见第10章），使用已有的cron时间表作
为文件内容（或者是一个空文件，如果时间表不存在的话）。
3. 浏览cron目录
如果你创建的脚本对精确的执行时间要求不高，用预配置的cron脚本目录会更方便。有4个
基本目录： hourly、 daily、 monthly和weekly。
$ ls /etc/cron.*ly
/etc/cron.daily:
cups makewhatis.cron prelink tmpwatch
...
