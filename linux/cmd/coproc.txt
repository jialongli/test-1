# Copyright (C) Rong Tao @Sylincom Beijing, 2019年 06月 14日 星期五 09:06:24 CST. 
3. 协程
协程可以同时做两件事。它在后台生成一个子shell，并在这个子shell中执行命令。
要进行协程处理，得使用coproc命令，还有要在子shell中执行的命令。
$ coproc sleep 10
[1] 2544
$
除了会创建子shell之外，协程基本上就是将命令置入后台模式。当输入coproc命令及其参
数之后，你会发现启用了一个后台作业。屏幕上会显示出后台作业号（1）以及进程ID（2544）。
jobs命令能够显示出协程的处理状态。
$ jobs
[1]+ Running coproc COPROC sleep 10 &
$
在上面的例子中可以看到在子shell中执行的后台命令是coproc COPROC sleep 10。 COPROC
是coproc命令给进程起的名字。你可以使用命令的扩展语法自己设置这个名字。
$ coproc My_Job { sleep 10; }
[1] 2570
$
$ jobs
[1]+ Running coproc My_Job { sleep 10; } &
$
通过使用扩展语法，协程的名字被设置成My_Job。这里要注意的是，扩展语法写起来有点
麻烦。必须确保在第一个花括号（{）和命令名之间有一个空格。还必须保证命令以分号（;）结
	尾。另外，分号和闭花括号（}）之间也得有一个空格。
	说明 协程能够让你尽情发挥想象力，发送或接收来自子shell中进程的信息。只有在拥有多个协
	程的时候才需要对协程进行命名，因为你得和它们进行通信。否则的话，让coproc命令
	将其设置成默认的名字COPROC就行了。
	你可以发挥才智，将协程与进程列表结合起来产生嵌套的子shell。只需要输入进程列表，然
	后把命令coproc放在前面就行了。
	$ coproc ( sleep 10; sleep 2 )
	[1] 2574
	$
	$ jobs
	[1]+ Running coproc COPROC ( sleep 10; sleep 2 ) &
	$
	$ ps --forest
	PID TTY TIME CMD
	2483 pts/12 00:00:00 bash
	2574 pts/12 00:00:00 \_ bash
	2575 pts/12 00:00:00 | \_ sleep
	2576 pts/12 00:00:00 \_ ps
$
记住，生成子shell的成本不低，而且速度还慢。创建嵌套子shell更是火上浇油！
在命令行中使用子shell能够获得灵活性和便利。要想获得这些优势，重要的是理解子shell的
行为方式。对于命令也是如此。在下一节中，我们将研究内建命令与外部命令之间的行为差异。
