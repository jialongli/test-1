# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_for_real_time/7/html/tuning_guide/real_time_throttling

# 实时调度问题
# 红帽企业版Linux实时版中的两种实时调度策略具有一个主要特征：它们一直运行到被更高优先级的线程抢占或直到它们“等待”（通过睡眠或执行I / O）为止。在的情况下SCHED_RR，操作系统可能会抢占一个线程，以便另一个SCHED_RR优先级相同的线程可以运行。在上述任何一种情况下，POSIX规范都没有提供任何规定来定义允许低优先级线程获得任何CPU时间的策略。

# 实时线程的这种特性意味着编写一个垄断100％给定CPU的应用程序非常容易。乍一看，这听起来似乎是个好主意，但实际上，它引起了操作系统的许多麻烦。操作系统负责管理系统范围的资源和按CPU的资源，并且必须定期检查描述这些资源的数据结构，并与它们一起执行内部管理活动。如果内核被SCHED_FIFO线程垄断，则它无法执行内务处理任务，最终整个系统将变得不稳定，从而可能导致崩溃。
# 在Red Hat Enterprise Linux for Real Time内核上，中断处理程序以具有SCHED_FIFO优先级的线程（默认值：50）运行。一个CPU-猪用螺纹SCHED_FIFO或SCHED_RR政策比中断处理程序线程更高，可以防止中断处理程序停止运行，导致程序等待由这些中断信号的数据被饿死和失败。
# 实时调度节流
# 红帽企业版实时Linux带有一种保护机制，该机制使系统管理员可以分配带宽以供实时任务使用。此保护机制被称为real-time scheduler throttling并由/proc文件系统中的两个参数控制：
# 
# /proc/sys/kernel/sched_rt_period_us
# 定义以微秒（微秒）为单位的周期，将其视为CPU带宽的100％。默认值为1,000,000μs（1秒）。必须非常仔细地考虑更改时间段的值，因为时间段过长或太小同样危险。
# /proc/sys/kernel/sched_rt_runtime_us
# 所有实时任务可用的总带宽。默认值为950,000μs（0.95 s），即CPU带宽的95％。将该值设置为-1意味着实时任务最多可能占用100％的CPU时间。仅当实时任务经过精心设计并且没有明显的警告（如无限制的轮询循环）时，这才足够。
# 对于实时调节机制的默认值定义的CPU时间的95％可以通过实时任务中使用。剩余的5％将用于非实时任务（在SCHED_OTHER类似调度策略下运行的任务）。重要的是要注意，如果单个实时任务占用了95％的CPU时隙，则该CPU上剩余的实时任务将不会运行。其余5％的CPU时间仅由非实时任务使用。
# 默认值的影响有两方面：流氓实时任务不会通过不允许非实时任务运行来锁定系统，另一方面，实时任务最多具有95％的CPU他们的可用时间，可能会影响他们的表现。
# 
1000000
