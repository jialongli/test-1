# Comment Rong Tao @Sylincom Beijing, 2020年 01月 19日 星期日 17:13:49 CST. 
# Copyright (C) Rong Tao @Sylincom Beijing, 2020年 01月 19日 星期日 17:11:44 CST. 
原型模式
原型模式本质上说就是对当前数据进行复制。就像变戏法一样，一个鸽子变成了两个鸽
子，两个鸽子变成了三个鸽子，就这么一直变下去。在变的过程中，我们不需要考虑具体的
数据类型。为什么呢？因为不同的数据有自己的复制类型，而且每个复制函数都是虚函数。
用C++怎么编写呢，那就是先写一个基类，再编写一个子类。就是这么简单。
那怎么使用呢？其实只要一个通用的调用接口就可以了。
class data* clone(class data* pData)
{
	return pData->copy();
}
就这么简单的一个技巧，对C 来说，当然也不是什么难事。
typedef struct _DATA
{
	struct _DATA* (*copy) (struct _DATA* pData);
}DATA;
假设也有这么一个类型data_A,
	DATA data_A = {data_copy_A};
既然上面用到了这个函数，所以我们也要定义啊。
struct _DATA* data_copy_A(struct _DATA* pData)
{
	DATA* pResult = (DATA*)malloc(sizeof(DATA));
	assert(NULL != pResult);
	memmove(pResult, pData, sizeof(DATA));
	return pResult;
};
使用上呢，当然也不含糊。
struct _DATA* clone(struct _DATA* pData)
{
	return pData->copy(pData);
};
