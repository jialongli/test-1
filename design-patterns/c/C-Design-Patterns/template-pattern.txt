# Comment Rong Tao @Sylincom Beijing, 2020年 01月 19日 星期日 17:13:49 CST. 
# Copyright (C) Rong Tao @Sylincom Beijing, 2020年 01月 19日 星期日 17:11:44 CST. 
模版模式
模板对于学习C++的同学，其实并不陌生。函数有模板函数，类也有模板类。那么这个
模板模式是个什么情况？我们可以思考一下，模板的本质是什么。比如说，现在我们需要编
写一个简单的比较模板函数。
template <typename type>
int compare (type a, type b)
{
	return a > b ? 1 : 0;
}
模板函数提示我们，只要比较的逻辑是确定的，那么不管是什么数据类型，都会得到一
个相应的结果。固然，这个比较的流程比较简单，即使没有采用模板函数也没有关系。但是，
要是需要拆分的步骤很多，那么又该怎么办呢？如果相通了这个问题，那么也就明白了什么
是template 模式。
比方说，现在我们需要设计一个流程。这个流程有很多小的步骤完成。然而，其中每一
个步骤的方法是多种多样的，我们可以很多选择。但是，所有步骤构成的逻辑是唯一的，那
么我们该怎么办呢？其实也简单。那就是在基类中除了流程函数外，其他的步骤函数全部设
置为virtual 函数即可。
basic 的类说明了基本的流程process 是唯一的，所以我们要做的就是对step1 和step2
进行改写。

class data_A : public basic
{
	public:
		data_A() {}
		~data_A() {}
		void step1()
		{
			printf("step 1 in data_A!\n");
		}
		void step2()
		{
			printf("step 2 in data_A!\n");
		}
};
所以，按照我个人的理解，这里的template 主要是一种流程上的统一，细节实现上的
分离。明白了这个思想，那么用C 语言来描述template 模式就不是什么难事了。
typedef struct _Basic
{
	void* pData;
	void (*step1) (struct _Basic* pBasic);
	void (*step2) (struct _Basic* pBasic);
	void (*process) (struct _Basic* pBasic);
}Basic;
因为在C++中process 函数是直接继承的，C 语言下面没有这个机制。所以，对于每一
个process 来说，process 函数都是唯一的，但是我们每一次操作的时候还是要去复制一遍函
数指针。而step1 和step2 是不同的，所以各种方法可以用来灵活修改自己的处理逻辑，没
有问题。

void process(struct _Basic* pBasic)
{
	pBasic->step1(pBasic);
	pBasic->step2(pBasic);
}


